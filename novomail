#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# vim: set ts=2 sw=2 sts=2 et:

# Author: Diego Blanco <diego.blanco@treitos.com>
# GitHub: https://github.com/diego-treitos/novomail

import argparse
import os
import shlex
import subprocess
import sys
import time
import traceback
from email.header import decode_header
from jinja2 import Template


NAME='novomail'
VERSION='1.0'

NOW=time.time()
DEFAULT_FORGET=300
DEFAULT_TEMPLATE='{% for a in accounts %}{% if a.unread_count > 0 %}{{ a.name }}: {% if a.unread_count > 0 %}{{ a.unread_count }}{% endif %} {% if a.important_count > 0 %}({{ a.important_count }} important){% endif %}{% endif %}{% endfor %}'


def my_header_decode( field ):
  header = ''
  for text in decode_header( field ):
    if type( text[0] ) == str:
      header += text[0] + ' '
    elif text[1]:
      header += text[0].decode(text[1]) + ' '
    else:
      header += text[0].decode('unicode_escape') + ' '
  return header.strip()


def parse_mail( mail_path ):
  meta = {}
  with open( mail_path, 'rb' ) as msg:
    while True:
      line = msg.readline().decode('unicode_escape')
      if line.startswith('From:'):
        meta['from'] = my_header_decode( line.lstrip('From:').strip() )
      if line.startswith('Subject:'):
        meta['subject'] = my_header_decode( line.lstrip('Subject:').strip() )
      if 'subject' in meta and 'from' in meta:
        break
      if not line:
        if 'subject' not in meta:
          meta['subject'] = ''
        if 'from' not in meta:
          meta['from'] = ''

  meta['timestamp'] = os.stat( mail_path ).st_mtime
  return meta


def check_account( acc ):
  global DEFAULT_FORGET
  global NOW

  acc['new'] = {}
  acc['important_new'] = {}
  acc['important_count'] = 0
  acc['unread_count'] = 0
  apath = os.path.expanduser( acc['path'] )
  for fol in os.listdir( apath ):
    # skip trash folders
    if any( s in fol.lower() for s in ('trash', 'spam', 'sent') ):
      continue

    important = False
    if fol in acc['important_folders']:
      important = True

    fol_new = os.path.join( apath, fol, 'new' )
    if os.path.isdir( fol_new ):
      acc['new'][ fol ] = []
      acc['important_new'][ fol ] = []

      for m in os.listdir( fol_new ):
        acc['unread_count'] += 1
        if important:
          acc['important_count'] += 1

        meta = parse_mail( os.path.join( fol_new, m ) )
        if NOW - meta['timestamp'] < DEFAULT_FORGET:
          if important:
           acc['important_new'][ fol ].append( meta )
          else:
            acc['new'][ fol ].append( meta )

      # Clean empty lists
      if not acc['new'][ fol ]:
        acc['new'].pop( fol )
      if not acc['important_new'][ fol ]:
        acc['important_new'].pop( fol )

  return acc


def main():
  global args

  accounts=[]
  for acc in args.account:
    acc_parts = acc.split(':')
    accounts.append({
      'name': acc_parts[0],
      'path': ':'.join(acc_parts[1:])
    })

  total_new = 0
  total_unread = 0
  total_important = 0
  total_important_new = 0
  for account in accounts:
    # Handle important folders
    account['important_folders'] = []
    if args.important:
      for important in args.important:
        acid = important.split(':')[0]
        acim = important.split(':')[1].split(',')
        if acid == account['name']:
          account['important_folders'] = acim

    check_account( account )

    account['new_count'] = 0
    for fol in account['new']:
      account['new_count'] += account['new'][fol].__len__()

    account['important_new_count'] = 0
    for fol in account['important_new']:
      account['important_new_count'] += account['important_new'][fol].__len__()

    total_new += account['new_count']
    total_unread += account['unread_count']
    total_important += account['important_count']
    total_important_new += account['important_new_count']

  context = {
    'accounts': accounts,
    'total_new': total_new,
    'total_unread': total_unread,
    'total_important': total_important,
    'total_important_new': total_important_new
  }
  if args.verbose:
    import json
    print( json.dumps( context, indent=4, sort_keys=True ) )
  else:
    print( Template( DEFAULT_TEMPLATE ).render( context ) )

  if total_new+total_important_new > 0 and args.hooks:
    for ct in args.hooks:
      cmd = Template( ct ).render( context )
      subprocess.run( shlex.split( cmd ), shell=False, check=True)


if __name__ == '__main__':
  try:
    parser = argparse.ArgumentParser( prog=sys.argv[0] )
    parser.add_argument('-v', '--verbose', action='store_true',
                        default=False,
                        help='Show the structure of the dict to be used in the Jinja2 template and some other debug information. Supress other output')
    parser.add_argument('-V', '--version', action='store_true',
                        default=False,
                        help='print version and exit')
    parser.add_argument('-a', '--account', action='append',
                        required=True,
                        help='Account Id and path to a directory containing the maildirs of one account. (i.e. account1:~/.mutt/account1/) It can be used several times for multiple accounts.')
    parser.add_argument('-i', '--important', action='append',
                        required=False,
                        help='Account Id and comman separated list of important folders for the account. (i.e. account1:Security,URGENT,Alerts) It can be used several times for multiple accounts.')
    parser.add_argument('-t', '--template', action='store',
                        help='Jinja2 template receiving the results dict as render context. (default: %s)' % DEFAULT_TEMPLATE.replace('%', '%%'))
    parser.add_argument('-x', '--exec', dest='hooks', action='append',
                        help='Jinja2 template that will use the novomail generated JSON (viewable via -v) to generate a command to be executed (no "shellisms" allowed). It can be specified several times and commands will be executed in that order.')
    parser.add_argument('-f', '--forget', dest='minutes', action='store',
                        help='Number of minutes after which the new mails are not anymore counted as new. (default: %d)' % DEFAULT_FORGET)
    args = parser.parse_args()

    if args.version:
      print( '%s %s' % (NAME, VERSION) )
      sys.exit( 0 )
    if args.verbose:
      start_time = time.time()
      print( time.strftime( '%b %d %H:%M:%S\n---------------' ) )
    if args.minutes:
      DEFAULT_FORGET = int( args.minutes ) * 60
    if args.template:
      DEFAULT_TEMPLATE = args.template
    main()
    if args.verbose:
      stop_time = time.time()
      print( time.strftime( '---------------\n%b %d %H:%M:%S' ) )
      print( '---------------\nTOTAL TIME: %.3fs' %(stop_time - start_time), end='' )
    sys.exit( 0 )
  except KeyboardInterrupt:  # Ctrl-C
    sys.exit( 130 )
  except SystemExit as e:  # sys.exit()
    raise e
  except Exception as e:
    print( str(e) )
    traceback.print_exc()
    os._exit(1)
